{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b9fe2c97.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\n//createStage  => creating a Matrice that will represent the grid\nexport const createStage = () => \n    Array.from(Array(STAGE_HEIGHT), ()=>\n\n        //For each row, create a new array and then fill it with another array with values 0, and 'clear'\n        //The 0 will be replaced with a letter that represents each tetromino \n        //The 'clear' property will be set to 'merge' when we will have a tetromino merge into the stage and not be cleared\n        //in the next render\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    )\n\nexport const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\n    for(let y = 0; y < player.tetromino.length; y+= 1){\n        for(let x = 0; x < player.tetromino[0].length; x += 1){\n            \n            //1. Check that we're on an actual tetromino cell\n            if(player.tetromino[y][x] !== 0){\n                if(\n                //2. Check that our movement is inside the game area's height (y)\n                //Shouldn't go through the bottom of the play area\n                !stage[y + player.pos.y + moveY] || \n\n                //3.  Check that the tetromino isn't moving outside of the area's width (x)\n                !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] || \n                //4. Check if the cell isn't set to clear, if it is set to clear then we aren't colliding with anything\n                stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n                ) {\n                    return true;\n                }\n            }\n        }\n    }\n}","import styled from 'styled-components';\n\nimport bgImage from '../../img/bg.png';\n\n\nexport const StyledTetrisWrapper = styled.div `\n    width: 100vw;\n    height: 100vh; \n    background: url(${bgImage}) #000;\n    background-size: cover;\n    overflow: hidden;\n`\n\n\nexport const StyledTetris = styled.div`\n\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width: 900px;\n\n    aside {\n        width: 100%;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`\n\n\n","export const TETROMINOS = {\n\n    0:  { shape: [[0]],  color:  '0, 0, 0' },\n\n\n    I: {\n        shape: [\n                    [0, 'I', 0, 0],\n                    [0, 'I', 0, 0],\n                    [0, 'I', 0, 0],\n                    [0, 'I', 0, 0]\n                ],\n\n        color: '80, 227, 230',\n    },\n\n    J: {\n        shape: [\n                    [0, 'J', 0],\n                    [0, 'J', 0],\n                    ['J', 'J', 0],\n                    \n                ],\n\n        color: '36, 95, 223',\n    },\n\n    L: {\n        shape: [\n                    [0, 'L', 0],\n                    [0, 'L', 0],\n                    [0, 'L', 'L'],\n                    \n                ],\n\n        color: '223, 173, 36',\n    },\n\n    O: {\n        shape: [\n                    ['O', 'O'],\n                    ['O', 'O']            \n                ],\n\n        color: '223, 217, 36',\n    },\n\n    S: {\n        shape: [\n                    [0, 'S', 'S'],\n                    ['S', 'S', 0],\n                    [0, 0, 0],\n                    \n                ],\n\n        color: '48, 211, 56',\n    },\n\n    T: {\n        shape: [\n                    [0, 0, 0],\n                    ['T', 'T', 'T'],\n                    [0, 'T', 0],\n                    \n                ],\n\n        color: '132, 61, 198',\n    },\n\n    Z: {\n        shape: [\n                    ['Z', 'Z', 0],\n                    [0, 'Z', 'Z'],\n                    [0, 0, 0],\n                    \n                ],\n\n        color: '227, 78, 78',\n    },\n\n}\n\n\nexport const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    //Generating a random number based on the tetrominos string length\n    //Then using that number to get a random letter from the tetrominos string\n    const randTetromino = \n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\n\n    return TETROMINOS[randTetromino];\n}","import { useState, useCallback } from \"react\";\n\n//useState will return an array with two items\n\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\nimport { clone } from \"@babel/types\";\n\nexport const usePlayer = () => {\n\n    const [player, setPlayer ]  = useState({\n\n        //the position of the player\n        pos: {x: 0, y : 0},\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n\n    });\n\n    const rotate = (matrix, dir) => {\n        // Make the rows to become cols (transpose)\n        const rotatedTetro = matrix.map((_, index) => \n        matrix.map(col => col[index]),\n        );\n\n        //Reverse each row to get a rotated matrix\n        if(dir > 0) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse();\n    };\n\n    const playerRotate = (stage, dir) => {\n\n        //A deep copy of the player\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        const pos = clonedPlayer.pos.x;\n\n        let offset = 1;\n\n        while(checkCollision(clonedPlayer, stage, {x: 0, y: 0})) {\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if(offset > clonedPlayer.tetromino[0].length){\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n\n        setPlayer(clonedPlayer);\n\n    }\n\n\n    const updatePlayerPos = ({x,y, collided}) => {\n\n        setPlayer(prev => ({\n            ...prev,\n            pos: {x:  (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() => {\n\n        setPlayer({\n            pos: {x: STAGE_WIDTH/ 2 -2 , y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n\n    }, [])\n\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n\n}","import {useState, useEffect} from \"react\";\nimport { createStage } from \"../gameHelpers\";\n\n\nexport const useStage = (player, resetPlayer) => {\n\n    const [stage, setStage ] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n        const sweepRows = newStage => \n        //ack = accumulator\n        newStage.reduce((ack, row) => {\n            if (row.findIndex(cell => cell[0] == 0) === -1){\n                setRowsCleared(prev => prev + 1);\n                ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                return ack;\n            }\n            ack.push(row);\n            return ack;\n        }, [])\n        const updateStage = prevStage => {\n            //First flush the stage\n            const newStage = prevStage.map(row => \n                    row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),                             \n                )\n\n            //Then draw the tetromino by:\n            //Checking which cells in the tetromino are occupied\n            //And that way it is possible  to know the shape of the tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0){\n                        //This will give the coordinates of the stage\n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value ,\n                            `${player.collided ? 'merged' : 'clear'}`,\n                        ]\n                    }\n                })\n            });\n            // Then check if we collided \n            if(player.collided){\n\n                resetPlayer();\n                return sweepRows(newStage);\n            }\n\n            return newStage;\n        };\n\n        setStage(prev => updateStage(prev))\n    }, [player, resetPlayer])\n\n    return [stage, setStage, rowsCleared];\n}","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(25vw / ${props => props.width})\n    );\n\n    grid-template-columns: repeat(${props => props.width}, 1fr);\n    grid-gap: 1px;\n    border: 2px solid #333;\n    width: 100%;\n    max-width: 25vw;\n    background: #111;\n\n`","import styled from 'styled-components';\n\n\n\nexport const StyledCell = styled.div`\n\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n    border-bottom-color: rbga(${props => props.color}, 0.1);\n    border-right-color: rbga(${props => props.color}, 1);\n    border-top-color: rbga(${props => props.color}, 1);\n    border-left-color: rbga(${props => props.color}, 0.3);\n\n\n\n\n\n`","import React from \"react\";\nimport {StyledCell} from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\n\nconst Cell = ({ type }) => (\n    <StyledCell type={type} color={TETROMINOS[type].color}></StyledCell>\n)\n\n\n\n\nexport default React.memo(Cell);","import React from \"react\";\nimport { StyledStage } from './styles/StyledStage';\nimport Cell from \"./Cell\";\n\n\n\n//Create a stage, map through it, and when you map through the stage array, you get a row\n//And each row has an array that holds the cells\n//For each cell, render out the Cell component\n//The type will be the first value of the cell array, which for now is '0' meaning no tetromino present\n//However, it will change depending on the shape of the tetromino\nconst Stage = ({ stage }) => (\n    <StyledStage width={ stage[0].length} height={stage.length}>\n        \n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n    \n    </StyledStage>\n)\n\nexport default Stage;","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    color: ${props => (props.gameOver ? 'red' : '#999')};\n    background: #000;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 0.8rem;\n\n`","import React from \"react\";\nimport { StyledDisplay } from \"./styles/StyledDisplay\";\n\nconst Display = ({gameOver, text}) => (\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n)\n\n\nexport default Display;","import styled from 'styled-components';\n\n\n\nexport const StyledStartButton = styled.div`\n\n    box-sizing: border-box;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    min-height: 20px;\n    width: 100%;\n    border-radius: 20px;\n    border:  none;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n    outline: none;\n    cursor: pointer;\n\n`","import React from \"react\";\n\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => (\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n)\n\nexport default StartButton;","import React, {useState} from \"react\";\n\nimport {createStage, checkCollision} from \"../gameHelpers\";\n\n//Styled Components\nimport {StyledTetrisWrapper, StyledTetris} from './styles/StyledTetris';\n\n\n//Custom Hooks\nimport { useInterval } from '../hooks/useInterval';\nimport {usePlayer} from '../hooks/usePlayer';\nimport {useStage} from '../hooks/useStage';\nimport {useGameStatus } from '../hooks/useGameStatus';\n\n//Components\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport { reset } from \"ansi-colors\";\n\nconst Tetris = () => {\n\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n    \n    \n\n    console.log('re-render');\n\n\n    const movePlayer = dir => {\n        if(!checkCollision(player, stage, { x: dir, y: 0})) {\n            updatePlayerPos({x: dir, y: 0})\n        }\n    }\n\n    const startGame = () => {\n        //Reset everything\n        //1000 equals to 1 second\n        setDropTime(1000);\n        setStage(createStage());\n        resetPlayer();\n        setGameOver(false);\n        setScore(0);\n        setRows(0);\n        setLevel(0);\n    }\n\n    const drop = () => {\n        // Increase level when player has cleared 10 rows\n        if(rows > (level + 1) * 10){\n            setLevel(prev => prev + 1);\n            //Also need to increase speed\n            setDropTime(1000 / (level + 1) + 200);\n        }\n        if(!checkCollision(player, stage, { x: 0, y: 1})){\n            //y is 1 because we are dropping the tetromino\n            updatePlayerPos({x: 0, y: 1, collided: false});\n        }\n        else{\n            //Create something when the game is over\n            //When y < 1 we know that we are colliding at the top of the stage\n            if(player.pos.y < 1){\n                console.log(\"GAME OVER\");\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPos({ x: 0, y: 0, collided: true})\n        }\n        \n        \n    }\n\n    const keyUp = ({ keyCode }) => {\n        if(!gameOver){\n            //if the down key is pressed then the interval(the fact that the tetromino automatically drops)\n            //turns on\n            if(keyCode === 40){\n                console.log(\"interval on\");\n                setDropTime(1000 / (level + 1) + 200);\n            }\n        }\n    }\n\n    const dropPlayer = () => {\n        console.log(\"interval off\");\n        setDropTime(null);\n        drop();\n\n    }\n\n    const move = ({ keyCode }) => {\n        if(!gameOver){\n            //37 and 39 is the keycode for the left  and right arrow of the keyboard\n            //Since we are moving to the left we put movePlayer to -1\n            if(keyCode === 37){\n                movePlayer(-1);\n            } else if(keyCode === 39){\n                movePlayer(1);\n            } else if(keyCode === 40){\n                dropPlayer();\n            } else if(keyCode === 38){\n                //Rotating it clockwise\n                playerRotate(stage, 1);\n            }\n        }\n    }\n\n    useInterval(()=>{\n        drop();\n    }, dropTime)\n\n    return (\n        //StyledTetrisWrapper allows us to register clicks on any part of the website, and not just the stage\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\n            <StyledTetris>\n            <Stage stage={stage}/>\n            {/* The side bar */}\n            <aside>\n                {gameOver ? (\n                    <Display gameOver={gameOver} text=\"Game Over\" />\n                ) : (\n                <div>\n                    <Display text={`Score: ${score}`} />\n                    <Display text={`Rows: ${rows}`} />\n                    <Display text={`Level: ${level}`} />\n                </div>\n\n                )}\n\n                <StartButton callback={startGame}/>\n            </aside>\n            </StyledTetris>\n        </StyledTetrisWrapper>\n    );\n};\n\n\nexport default Tetris;","import {useState, useEffect, useCallback} from 'react';\n\nexport const useGameStatus = rowsCleared => {\n   \n    const   [score, setScore] = useState(0);\n    const   [rows, setRows] = useState(0);\n    const   [level, setLevel] = useState(0);\n\n    //These represent the scores from the original tetris game\n    const   linePoints = [40, 100, 300, 1200];\n    const calcScore = useCallback(() => {\n        //Check if we have score\n        //if we clear any rows on the render:\n        if(rowsCleared > 0){\n            //The calculation of the original tetris score\n            setScore(prev => prev + linePoints[rowsCleared -1] * (level + 1));\n            setRows(prev => prev + rowsCleared)\n        }\n    }, [level, linePoints, rowsCleared])\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score])\n\n    return [score, setScore, rows, setRows, level, setLevel];\n\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n\n  </div>\n);\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}